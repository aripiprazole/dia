file: WITH
##
## Ends in an error in state: 0.
##
## file' -> . file [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: TYPE WITH
##
## Ends in an error in state: 1.
##
## decl -> TYPE . def_name list(parameter) option(type_repr) EQUALS list(constructor) [ TYPE PRAGMA LET EOF ]
##
## The known suffix of the stack is as follows:
## TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET LEFT_PARENS WITH
##
## Ends in an error in state: 2.
##
## def_name -> LEFT_PARENS . infix_symbol RIGHT_PARENS [ TYPE PRAGMA LET LEFT_PARENS LEFT_BRACES ID EQUALS EOF COLON ]
##
## The known suffix of the stack is as follows:
## LEFT_PARENS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET LEFT_PARENS INFIX_ID WITH
##
## Ends in an error in state: 4.
##
## def_name -> LEFT_PARENS infix_symbol . RIGHT_PARENS [ TYPE PRAGMA LET LEFT_PARENS LEFT_BRACES ID EQUALS EOF COLON ]
##
## The known suffix of the stack is as follows:
## LEFT_PARENS infix_symbol
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: TYPE ID WITH
##
## Ends in an error in state: 8.
##
## decl -> TYPE def_name . list(parameter) option(type_repr) EQUALS list(constructor) [ TYPE PRAGMA LET EOF ]
##
## The known suffix of the stack is as follows:
## TYPE def_name
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID LEFT_PARENS WITH
##
## Ends in an error in state: 9.
##
## parameter -> LEFT_PARENS . nonempty_list(symbol) option(type_repr) RIGHT_PARENS [ LEFT_PARENS LEFT_BRACES EQUALS COLON ]
##
## The known suffix of the stack is as follows:
## LEFT_PARENS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID LEFT_BRACES ID WITH
##
## Ends in an error in state: 10.
##
## nonempty_list(symbol) -> symbol . [ RIGHT_PARENS RIGHT_BRACES COLON ARROW ]
## nonempty_list(symbol) -> symbol . nonempty_list(symbol) [ RIGHT_PARENS RIGHT_BRACES COLON ARROW ]
##
## The known suffix of the stack is as follows:
## symbol
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID LEFT_PARENS ID RIGHT_BRACES
##
## Ends in an error in state: 12.
##
## parameter -> LEFT_PARENS nonempty_list(symbol) . option(type_repr) RIGHT_PARENS [ LEFT_PARENS LEFT_BRACES EQUALS COLON ]
##
## The known suffix of the stack is as follows:
## LEFT_PARENS nonempty_list(symbol)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 10, spurious reduction of production nonempty_list(symbol) -> symbol
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID COLON WITH
##
## Ends in an error in state: 13.
##
## type_repr -> COLON . tt [ TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET EQUALS EOF BAR ]
##
## The known suffix of the stack is as follows:
## COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID COLON LEFT_PARENS WITH
##
## Ends in an error in state: 15.
##
## plain_primary -> LEFT_PARENS . expr RIGHT_PARENS [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA NUMBER LET LEFT_PARENS LEFT_BRACES INFIX_ID IN ID EQUALS EOF COLON BAR ARROW ]
##
## The known suffix of the stack is as follows:
## LEFT_PARENS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUALS MATCH WITH
##
## Ends in an error in state: 16.
##
## plain_expr -> MATCH . expr WITH nonempty_list(case) [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EOF ]
## plain_expr -> MATCH . expr WITH [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EOF ]
##
## The known suffix of the stack is as follows:
## MATCH
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUALS LET WITH
##
## Ends in an error in state: 17.
##
## plain_expr -> LET . symbol EQUALS expr IN expr [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EOF ]
##
## The known suffix of the stack is as follows:
## LET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUALS LET ID WITH
##
## Ends in an error in state: 18.
##
## plain_expr -> LET symbol . EQUALS expr IN expr [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EOF ]
##
## The known suffix of the stack is as follows:
## LET symbol
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUALS LET ID EQUALS WITH
##
## Ends in an error in state: 19.
##
## plain_expr -> LET symbol EQUALS . expr IN expr [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EOF ]
##
## The known suffix of the stack is as follows:
## LET symbol EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID COLON LEFT_BRACES WITH
##
## Ends in an error in state: 20.
##
## plain_primary -> LEFT_BRACES . expr RIGHT_BRACES [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA NUMBER LET LEFT_PARENS LEFT_BRACES INFIX_ID IN ID EQUALS EOF COLON BAR ARROW ]
##
## The known suffix of the stack is as follows:
## LEFT_BRACES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUALS FUN WITH
##
## Ends in an error in state: 21.
##
## plain_expr -> FUN . nonempty_list(symbol) ARROW expr [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EOF ]
##
## The known suffix of the stack is as follows:
## FUN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUALS FUN ID RIGHT_PARENS
##
## Ends in an error in state: 22.
##
## plain_expr -> FUN nonempty_list(symbol) . ARROW expr [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EOF ]
##
## The known suffix of the stack is as follows:
## FUN nonempty_list(symbol)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 10, spurious reduction of production nonempty_list(symbol) -> symbol
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUALS FUN ID ARROW WITH
##
## Ends in an error in state: 23.
##
## plain_expr -> FUN nonempty_list(symbol) ARROW . expr [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EOF ]
##
## The known suffix of the stack is as follows:
## FUN nonempty_list(symbol) ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUALS ID EQUALS
##
## Ends in an error in state: 35.
##
## e_infix_plain -> e_pi . COLON e_pi [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EOF ]
## e_infix_plain -> e_pi . infix_symbol e_pi [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EOF ]
## plain_expr -> e_pi . [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EOF ]
##
## The known suffix of the stack is as follows:
## e_pi
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 39, spurious reduction of production e_pi_plain -> e_app
## In state 34, spurious reduction of production mark_position(e_pi_plain) -> e_pi_plain
## In state 30, spurious reduction of production e_pi -> mark_position(e_pi_plain)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID COLON ID COLON WITH
##
## Ends in an error in state: 36.
##
## e_infix_plain -> e_pi COLON . e_pi [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EQUALS EOF BAR ]
##
## The known suffix of the stack is as follows:
## e_pi COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID COLON ID MATCH
##
## Ends in an error in state: 39.
##
## e_app_plain -> e_app . primary [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA NUMBER LET LEFT_PARENS LEFT_BRACES INFIX_ID IN ID EQUALS EOF COLON BAR ARROW ]
## e_pi_plain -> e_app . [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET INFIX_ID IN EQUALS EOF COLON BAR ]
## e_pi_plain -> e_app . ARROW e_pi [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET INFIX_ID IN EQUALS EOF COLON BAR ]
##
## The known suffix of the stack is as follows:
## e_app
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID COLON ID ARROW WITH
##
## Ends in an error in state: 40.
##
## e_pi_plain -> e_app ARROW . e_pi [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET INFIX_ID IN EQUALS EOF COLON BAR ]
##
## The known suffix of the stack is as follows:
## e_app ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID COLON ID INFIX_ID WITH
##
## Ends in an error in state: 43.
##
## e_infix_plain -> e_pi infix_symbol . e_pi [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EQUALS EOF BAR ]
##
## The known suffix of the stack is as follows:
## e_pi infix_symbol
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID COLON LEFT_BRACES ID WITH
##
## Ends in an error in state: 47.
##
## plain_primary -> LEFT_BRACES expr . RIGHT_BRACES [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA NUMBER LET LEFT_PARENS LEFT_BRACES INFIX_ID IN ID EQUALS EOF COLON BAR ARROW ]
##
## The known suffix of the stack is as follows:
## LEFT_BRACES expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 39, spurious reduction of production e_pi_plain -> e_app
## In state 34, spurious reduction of production mark_position(e_pi_plain) -> e_pi_plain
## In state 30, spurious reduction of production e_pi -> mark_position(e_pi_plain)
## In state 35, spurious reduction of production plain_expr -> e_pi
## In state 27, spurious reduction of production mark_position(plain_expr) -> plain_expr
## In state 29, spurious reduction of production expr -> mark_position(plain_expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUALS LET ID EQUALS ID WITH
##
## Ends in an error in state: 49.
##
## plain_expr -> LET symbol EQUALS expr . IN expr [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EOF ]
##
## The known suffix of the stack is as follows:
## LET symbol EQUALS expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 39, spurious reduction of production e_pi_plain -> e_app
## In state 34, spurious reduction of production mark_position(e_pi_plain) -> e_pi_plain
## In state 30, spurious reduction of production e_pi -> mark_position(e_pi_plain)
## In state 35, spurious reduction of production plain_expr -> e_pi
## In state 27, spurious reduction of production mark_position(plain_expr) -> plain_expr
## In state 29, spurious reduction of production expr -> mark_position(plain_expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUALS LET ID EQUALS ID IN WITH
##
## Ends in an error in state: 50.
##
## plain_expr -> LET symbol EQUALS expr IN . expr [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EOF ]
##
## The known suffix of the stack is as follows:
## LET symbol EQUALS expr IN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUALS MATCH ID TYPE
##
## Ends in an error in state: 52.
##
## plain_expr -> MATCH expr . WITH nonempty_list(case) [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EOF ]
## plain_expr -> MATCH expr . WITH [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EOF ]
##
## The known suffix of the stack is as follows:
## MATCH expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 39, spurious reduction of production e_pi_plain -> e_app
## In state 34, spurious reduction of production mark_position(e_pi_plain) -> e_pi_plain
## In state 30, spurious reduction of production e_pi -> mark_position(e_pi_plain)
## In state 35, spurious reduction of production plain_expr -> e_pi
## In state 27, spurious reduction of production mark_position(plain_expr) -> plain_expr
## In state 29, spurious reduction of production expr -> mark_position(plain_expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUALS MATCH ID WITH NUMBER
##
## Ends in an error in state: 53.
##
## plain_expr -> MATCH expr WITH . nonempty_list(case) [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EOF ]
## plain_expr -> MATCH expr WITH . [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EOF ]
##
## The known suffix of the stack is as follows:
## MATCH expr WITH
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUALS MATCH ID WITH BAR WITH
##
## Ends in an error in state: 54.
##
## case -> BAR . pattern DOUBLE_ARROW tt [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EOF BAR ]
##
## The known suffix of the stack is as follows:
## BAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUALS MATCH ID WITH BAR ID WITH
##
## Ends in an error in state: 55.
##
## def_name -> symbol . [ LEFT_PARENS ]
## pattern -> symbol . [ RIGHT_PARENS DOUBLE_ARROW COMMA ]
##
## The known suffix of the stack is as follows:
## symbol
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUALS MATCH ID WITH BAR ID RIGHT_PARENS
##
## Ends in an error in state: 56.
##
## case -> BAR pattern . DOUBLE_ARROW tt [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EOF BAR ]
##
## The known suffix of the stack is as follows:
## BAR pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 55, spurious reduction of production pattern -> symbol
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUALS MATCH ID WITH BAR ID DOUBLE_ARROW WITH
##
## Ends in an error in state: 57.
##
## case -> BAR pattern DOUBLE_ARROW . tt [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EOF BAR ]
##
## The known suffix of the stack is as follows:
## BAR pattern DOUBLE_ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUALS MATCH ID WITH BAR LEFT_PARENS INFIX_ID RIGHT_PARENS WITH
##
## Ends in an error in state: 63.
##
## pattern -> def_name . LEFT_PARENS loption(separated_nonempty_list(COMMA,pattern)) RIGHT_PARENS [ RIGHT_PARENS DOUBLE_ARROW COMMA ]
##
## The known suffix of the stack is as follows:
## def_name
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUALS MATCH ID WITH BAR ID LEFT_PARENS WITH
##
## Ends in an error in state: 64.
##
## pattern -> def_name LEFT_PARENS . loption(separated_nonempty_list(COMMA,pattern)) RIGHT_PARENS [ RIGHT_PARENS DOUBLE_ARROW COMMA ]
##
## The known suffix of the stack is as follows:
## def_name LEFT_PARENS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUALS MATCH ID WITH BAR ID LEFT_PARENS ID DOUBLE_ARROW
##
## Ends in an error in state: 66.
##
## separated_nonempty_list(COMMA,pattern) -> pattern . [ RIGHT_PARENS ]
## separated_nonempty_list(COMMA,pattern) -> pattern . COMMA separated_nonempty_list(COMMA,pattern) [ RIGHT_PARENS ]
##
## The known suffix of the stack is as follows:
## pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 55, spurious reduction of production pattern -> symbol
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUALS MATCH ID WITH BAR ID LEFT_PARENS ID COMMA WITH
##
## Ends in an error in state: 67.
##
## separated_nonempty_list(COMMA,pattern) -> pattern COMMA . separated_nonempty_list(COMMA,pattern) [ RIGHT_PARENS ]
##
## The known suffix of the stack is as follows:
## pattern COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUALS MATCH ID WITH BAR ID DOUBLE_ARROW ID EQUALS
##
## Ends in an error in state: 72.
##
## nonempty_list(case) -> case . [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EOF ]
## nonempty_list(case) -> case . nonempty_list(case) [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EOF ]
##
## The known suffix of the stack is as follows:
## case
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 39, spurious reduction of production e_pi_plain -> e_app
## In state 34, spurious reduction of production mark_position(e_pi_plain) -> e_pi_plain
## In state 30, spurious reduction of production e_pi -> mark_position(e_pi_plain)
## In state 61, spurious reduction of production plain_tt -> e_pi
## In state 59, spurious reduction of production mark_position(plain_tt) -> plain_tt
## In state 60, spurious reduction of production tt -> mark_position(plain_tt)
## In state 58, spurious reduction of production case -> BAR pattern DOUBLE_ARROW tt
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID COLON LEFT_PARENS ID WITH
##
## Ends in an error in state: 74.
##
## plain_primary -> LEFT_PARENS expr . RIGHT_PARENS [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA NUMBER LET LEFT_PARENS LEFT_BRACES INFIX_ID IN ID EQUALS EOF COLON BAR ARROW ]
##
## The known suffix of the stack is as follows:
## LEFT_PARENS expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 39, spurious reduction of production e_pi_plain -> e_app
## In state 34, spurious reduction of production mark_position(e_pi_plain) -> e_pi_plain
## In state 30, spurious reduction of production e_pi -> mark_position(e_pi_plain)
## In state 35, spurious reduction of production plain_expr -> e_pi
## In state 27, spurious reduction of production mark_position(plain_expr) -> plain_expr
## In state 29, spurious reduction of production expr -> mark_position(plain_expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID LEFT_PARENS ID COLON ID WITH
##
## Ends in an error in state: 78.
##
## parameter -> LEFT_PARENS nonempty_list(symbol) option(type_repr) . RIGHT_PARENS [ LEFT_PARENS LEFT_BRACES EQUALS COLON ]
##
## The known suffix of the stack is as follows:
## LEFT_PARENS nonempty_list(symbol) option(type_repr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 39, spurious reduction of production e_pi_plain -> e_app
## In state 34, spurious reduction of production mark_position(e_pi_plain) -> e_pi_plain
## In state 30, spurious reduction of production e_pi -> mark_position(e_pi_plain)
## In state 61, spurious reduction of production plain_tt -> e_pi
## In state 59, spurious reduction of production mark_position(plain_tt) -> plain_tt
## In state 60, spurious reduction of production tt -> mark_position(plain_tt)
## In state 76, spurious reduction of production type_repr -> COLON tt
## In state 77, spurious reduction of production option(type_repr) -> type_repr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID LEFT_BRACES WITH
##
## Ends in an error in state: 80.
##
## parameter -> LEFT_BRACES . nonempty_list(symbol) option(type_repr) RIGHT_BRACES [ LEFT_PARENS LEFT_BRACES EQUALS COLON ]
##
## The known suffix of the stack is as follows:
## LEFT_BRACES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID LEFT_BRACES ID RIGHT_PARENS
##
## Ends in an error in state: 81.
##
## parameter -> LEFT_BRACES nonempty_list(symbol) . option(type_repr) RIGHT_BRACES [ LEFT_PARENS LEFT_BRACES EQUALS COLON ]
##
## The known suffix of the stack is as follows:
## LEFT_BRACES nonempty_list(symbol)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 10, spurious reduction of production nonempty_list(symbol) -> symbol
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID LEFT_BRACES ID COLON ID WITH
##
## Ends in an error in state: 82.
##
## parameter -> LEFT_BRACES nonempty_list(symbol) option(type_repr) . RIGHT_BRACES [ LEFT_PARENS LEFT_BRACES EQUALS COLON ]
##
## The known suffix of the stack is as follows:
## LEFT_BRACES nonempty_list(symbol) option(type_repr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 39, spurious reduction of production e_pi_plain -> e_app
## In state 34, spurious reduction of production mark_position(e_pi_plain) -> e_pi_plain
## In state 30, spurious reduction of production e_pi -> mark_position(e_pi_plain)
## In state 61, spurious reduction of production plain_tt -> e_pi
## In state 59, spurious reduction of production mark_position(plain_tt) -> plain_tt
## In state 60, spurious reduction of production tt -> mark_position(plain_tt)
## In state 76, spurious reduction of production type_repr -> COLON tt
## In state 77, spurious reduction of production option(type_repr) -> type_repr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID LEFT_BRACES ID RIGHT_BRACES WITH
##
## Ends in an error in state: 84.
##
## list(parameter) -> parameter . list(parameter) [ EQUALS COLON ]
##
## The known suffix of the stack is as follows:
## parameter
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: TYPE ID COLON ID WITH
##
## Ends in an error in state: 87.
##
## decl -> TYPE def_name list(parameter) option(type_repr) . EQUALS list(constructor) [ TYPE PRAGMA LET EOF ]
##
## The known suffix of the stack is as follows:
## TYPE def_name list(parameter) option(type_repr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 39, spurious reduction of production e_pi_plain -> e_app
## In state 34, spurious reduction of production mark_position(e_pi_plain) -> e_pi_plain
## In state 30, spurious reduction of production e_pi -> mark_position(e_pi_plain)
## In state 61, spurious reduction of production plain_tt -> e_pi
## In state 59, spurious reduction of production mark_position(plain_tt) -> plain_tt
## In state 60, spurious reduction of production tt -> mark_position(plain_tt)
## In state 76, spurious reduction of production type_repr -> COLON tt
## In state 77, spurious reduction of production option(type_repr) -> type_repr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: TYPE ID EQUALS WITH
##
## Ends in an error in state: 88.
##
## decl -> TYPE def_name list(parameter) option(type_repr) EQUALS . list(constructor) [ TYPE PRAGMA LET EOF ]
##
## The known suffix of the stack is as follows:
## TYPE def_name list(parameter) option(type_repr) EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: TYPE ID EQUALS BAR WITH
##
## Ends in an error in state: 89.
##
## constructor -> BAR . def_name type_repr [ TYPE PRAGMA LET EOF BAR ]
##
## The known suffix of the stack is as follows:
## BAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: TYPE ID EQUALS BAR ID WITH
##
## Ends in an error in state: 90.
##
## constructor -> BAR def_name . type_repr [ TYPE PRAGMA LET EOF BAR ]
##
## The known suffix of the stack is as follows:
## BAR def_name
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: TYPE ID EQUALS BAR ID COLON ID WITH
##
## Ends in an error in state: 93.
##
## list(constructor) -> constructor . list(constructor) [ TYPE PRAGMA LET EOF ]
##
## The known suffix of the stack is as follows:
## constructor
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 39, spurious reduction of production e_pi_plain -> e_app
## In state 34, spurious reduction of production mark_position(e_pi_plain) -> e_pi_plain
## In state 30, spurious reduction of production e_pi -> mark_position(e_pi_plain)
## In state 61, spurious reduction of production plain_tt -> e_pi
## In state 59, spurious reduction of production mark_position(plain_tt) -> plain_tt
## In state 60, spurious reduction of production tt -> mark_position(plain_tt)
## In state 76, spurious reduction of production type_repr -> COLON tt
## In state 91, spurious reduction of production constructor -> BAR def_name type_repr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: PRAGMA WITH
##
## Ends in an error in state: 95.
##
## decl -> PRAGMA . def_name list(def_name) [ TYPE PRAGMA LET EOF ]
##
## The known suffix of the stack is as follows:
## PRAGMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: PRAGMA ID WITH
##
## Ends in an error in state: 96.
##
## decl -> PRAGMA def_name . list(def_name) [ TYPE PRAGMA LET EOF ]
##
## The known suffix of the stack is as follows:
## PRAGMA def_name
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: PRAGMA ID ID WITH
##
## Ends in an error in state: 98.
##
## list(def_name) -> def_name . list(def_name) [ TYPE PRAGMA LET EOF ]
##
## The known suffix of the stack is as follows:
## def_name
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET WITH
##
## Ends in an error in state: 100.
##
## decl -> LET . def_name list(parameter) option(type_repr) EQUALS expr [ TYPE PRAGMA LET EOF ]
##
## The known suffix of the stack is as follows:
## LET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID WITH
##
## Ends in an error in state: 101.
##
## decl -> LET def_name . list(parameter) option(type_repr) EQUALS expr [ TYPE PRAGMA LET EOF ]
##
## The known suffix of the stack is as follows:
## LET def_name
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID COLON ID WITH
##
## Ends in an error in state: 103.
##
## decl -> LET def_name list(parameter) option(type_repr) . EQUALS expr [ TYPE PRAGMA LET EOF ]
##
## The known suffix of the stack is as follows:
## LET def_name list(parameter) option(type_repr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 39, spurious reduction of production e_pi_plain -> e_app
## In state 34, spurious reduction of production mark_position(e_pi_plain) -> e_pi_plain
## In state 30, spurious reduction of production e_pi -> mark_position(e_pi_plain)
## In state 61, spurious reduction of production plain_tt -> e_pi
## In state 59, spurious reduction of production mark_position(plain_tt) -> plain_tt
## In state 60, spurious reduction of production tt -> mark_position(plain_tt)
## In state 76, spurious reduction of production type_repr -> COLON tt
## In state 77, spurious reduction of production option(type_repr) -> type_repr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUALS WITH
##
## Ends in an error in state: 104.
##
## decl -> LET def_name list(parameter) option(type_repr) EQUALS . expr [ TYPE PRAGMA LET EOF ]
##
## The known suffix of the stack is as follows:
## LET def_name list(parameter) option(type_repr) EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUALS ID WITH
##
## Ends in an error in state: 109.
##
## list(decl) -> decl . list(decl) [ EOF ]
##
## The known suffix of the stack is as follows:
## decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 39, spurious reduction of production e_pi_plain -> e_app
## In state 34, spurious reduction of production mark_position(e_pi_plain) -> e_pi_plain
## In state 30, spurious reduction of production e_pi -> mark_position(e_pi_plain)
## In state 35, spurious reduction of production plain_expr -> e_pi
## In state 27, spurious reduction of production mark_position(plain_expr) -> plain_expr
## In state 29, spurious reduction of production expr -> mark_position(plain_expr)
## In state 105, spurious reduction of production decl -> LET def_name list(parameter) option(type_repr) EQUALS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>


file: WITH
##
## Ends in an error in state: 0.
##
## file' -> . file [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET WITH
##
## Ends in an error in state: 1.
##
## decl -> LET . def_name list(parameter) option(type_repr) DEF_EQUALS expr [ LET EOF ]
##
## The known suffix of the stack is as follows:
## LET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET LEFT_PARENS WITH
##
## Ends in an error in state: 2.
##
## def_name -> LEFT_PARENS . symbol RIGHT_PARENS [ RIGHT_PARENS LEFT_PARENS LEFT_BRACES ID DEF_EQUALS COLON ]
##
## The known suffix of the stack is as follows:
## LEFT_PARENS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET LEFT_PARENS ID WITH
##
## Ends in an error in state: 4.
##
## def_name -> LEFT_PARENS symbol . RIGHT_PARENS [ RIGHT_PARENS LEFT_PARENS LEFT_BRACES ID DEF_EQUALS COLON ]
##
## The known suffix of the stack is as follows:
## LEFT_PARENS symbol
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID WITH
##
## Ends in an error in state: 7.
##
## decl -> LET def_name . list(parameter) option(type_repr) DEF_EQUALS expr [ LET EOF ]
##
## The known suffix of the stack is as follows:
## LET def_name
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID LEFT_PARENS WITH
##
## Ends in an error in state: 8.
##
## parameter -> LEFT_PARENS . nonempty_list(symbol) option(type_repr) RIGHT_PARENS [ LEFT_PARENS LEFT_BRACES DEF_EQUALS COLON ]
##
## The known suffix of the stack is as follows:
## LEFT_PARENS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID LEFT_BRACES ID WITH
##
## Ends in an error in state: 9.
##
## nonempty_list(symbol) -> symbol . [ RIGHT_PARENS RIGHT_BRACES COLON ARROW ]
## nonempty_list(symbol) -> symbol . nonempty_list(symbol) [ RIGHT_PARENS RIGHT_BRACES COLON ARROW ]
##
## The known suffix of the stack is as follows:
## symbol
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID LEFT_PARENS ID RIGHT_BRACES
##
## Ends in an error in state: 11.
##
## parameter -> LEFT_PARENS nonempty_list(symbol) . option(type_repr) RIGHT_PARENS [ LEFT_PARENS LEFT_BRACES DEF_EQUALS COLON ]
##
## The known suffix of the stack is as follows:
## LEFT_PARENS nonempty_list(symbol)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 9, spurious reduction of production nonempty_list(symbol) -> symbol
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID COLON WITH
##
## Ends in an error in state: 12.
##
## type_repr -> COLON . tt [ RIGHT_PARENS RIGHT_BRACES DEF_EQUALS ]
##
## The known suffix of the stack is as follows:
## COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID COLON LEFT_PARENS WITH
##
## Ends in an error in state: 14.
##
## primary -> LEFT_PARENS . expr RIGHT_PARENS [ WITH RIGHT_PARENS RIGHT_BRACES NUMBER LET LEFT_PARENS LEFT_BRACES INFIX_ID IN ID EOF DEF_EQUALS BAR ARROW ]
##
## The known suffix of the stack is as follows:
## LEFT_PARENS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID DEF_EQUALS MATCH WITH
##
## Ends in an error in state: 15.
##
## expr -> MATCH . expr WITH option(BAR) loption(separated_nonempty_list(BAR,case)) [ WITH RIGHT_PARENS RIGHT_BRACES LET IN EOF ]
##
## The known suffix of the stack is as follows:
## MATCH
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID DEF_EQUALS LET WITH
##
## Ends in an error in state: 16.
##
## expr -> LET . symbol DEF_EQUALS expr IN expr [ WITH RIGHT_PARENS RIGHT_BRACES LET IN EOF ]
##
## The known suffix of the stack is as follows:
## LET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID DEF_EQUALS LET ID WITH
##
## Ends in an error in state: 17.
##
## expr -> LET symbol . DEF_EQUALS expr IN expr [ WITH RIGHT_PARENS RIGHT_BRACES LET IN EOF ]
##
## The known suffix of the stack is as follows:
## LET symbol
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID DEF_EQUALS LET ID DEF_EQUALS WITH
##
## Ends in an error in state: 18.
##
## expr -> LET symbol DEF_EQUALS . expr IN expr [ WITH RIGHT_PARENS RIGHT_BRACES LET IN EOF ]
##
## The known suffix of the stack is as follows:
## LET symbol DEF_EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID DEF_EQUALS FUN WITH
##
## Ends in an error in state: 19.
##
## expr -> FUN . nonempty_list(symbol) ARROW expr [ WITH RIGHT_PARENS RIGHT_BRACES LET IN EOF ]
##
## The known suffix of the stack is as follows:
## FUN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID DEF_EQUALS FUN ID RIGHT_PARENS
##
## Ends in an error in state: 20.
##
## expr -> FUN nonempty_list(symbol) . ARROW expr [ WITH RIGHT_PARENS RIGHT_BRACES LET IN EOF ]
##
## The known suffix of the stack is as follows:
## FUN nonempty_list(symbol)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 9, spurious reduction of production nonempty_list(symbol) -> symbol
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID DEF_EQUALS FUN ID ARROW WITH
##
## Ends in an error in state: 21.
##
## expr -> FUN nonempty_list(symbol) ARROW . expr [ WITH RIGHT_PARENS RIGHT_BRACES LET IN EOF ]
##
## The known suffix of the stack is as follows:
## FUN nonempty_list(symbol) ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID COLON ID TYPE
##
## Ends in an error in state: 23.
##
## e_app -> primary . [ WITH RIGHT_PARENS RIGHT_BRACES NUMBER LET LEFT_PARENS LEFT_BRACES IN ID EOF DEF_EQUALS ARROW ]
## e_infix -> primary . infix_symbol primary [ WITH RIGHT_PARENS RIGHT_BRACES LET IN EOF DEF_EQUALS ]
##
## The known suffix of the stack is as follows:
## primary
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID COLON ID INFIX_ID WITH
##
## Ends in an error in state: 25.
##
## e_infix -> primary infix_symbol . primary [ WITH RIGHT_PARENS RIGHT_BRACES LET IN EOF DEF_EQUALS ]
##
## The known suffix of the stack is as follows:
## primary infix_symbol
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID DEF_EQUALS ID DEF_EQUALS
##
## Ends in an error in state: 28.
##
## e_pi -> e_pi . ARROW primary [ WITH RIGHT_PARENS RIGHT_BRACES LET IN EOF ARROW ]
## expr -> e_pi . [ WITH RIGHT_PARENS RIGHT_BRACES LET IN EOF ]
##
## The known suffix of the stack is as follows:
## e_pi
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 23, spurious reduction of production e_app -> primary
## In state 32, spurious reduction of production e_pi -> e_app
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID COLON ID ARROW WITH
##
## Ends in an error in state: 29.
##
## e_pi -> e_pi ARROW . primary [ WITH RIGHT_PARENS RIGHT_BRACES LET IN EOF DEF_EQUALS ARROW ]
##
## The known suffix of the stack is as follows:
## e_pi ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID COLON ID ID TYPE
##
## Ends in an error in state: 32.
##
## e_app -> e_app . primary [ WITH RIGHT_PARENS RIGHT_BRACES NUMBER LET LEFT_PARENS LEFT_BRACES IN ID EOF DEF_EQUALS ARROW ]
## e_app -> e_app . LEFT_BRACES expr RIGHT_BRACES [ WITH RIGHT_PARENS RIGHT_BRACES NUMBER LET LEFT_PARENS LEFT_BRACES IN ID EOF DEF_EQUALS ARROW ]
## e_pi -> e_app . [ WITH RIGHT_PARENS RIGHT_BRACES LET IN EOF DEF_EQUALS ARROW ]
##
## The known suffix of the stack is as follows:
## e_app
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID COLON ID LEFT_BRACES WITH
##
## Ends in an error in state: 33.
##
## e_app -> e_app LEFT_BRACES . expr RIGHT_BRACES [ WITH RIGHT_PARENS RIGHT_BRACES NUMBER LET LEFT_PARENS LEFT_BRACES IN ID EOF DEF_EQUALS ARROW ]
##
## The known suffix of the stack is as follows:
## e_app LEFT_BRACES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID COLON ID LEFT_BRACES ID WITH
##
## Ends in an error in state: 34.
##
## e_app -> e_app LEFT_BRACES expr . RIGHT_BRACES [ WITH RIGHT_PARENS RIGHT_BRACES NUMBER LET LEFT_PARENS LEFT_BRACES IN ID EOF DEF_EQUALS ARROW ]
##
## The known suffix of the stack is as follows:
## e_app LEFT_BRACES expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 23, spurious reduction of production e_app -> primary
## In state 32, spurious reduction of production e_pi -> e_app
## In state 28, spurious reduction of production expr -> e_pi
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID DEF_EQUALS LET ID DEF_EQUALS ID WITH
##
## Ends in an error in state: 37.
##
## expr -> LET symbol DEF_EQUALS expr . IN expr [ WITH RIGHT_PARENS RIGHT_BRACES LET IN EOF ]
##
## The known suffix of the stack is as follows:
## LET symbol DEF_EQUALS expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 23, spurious reduction of production e_app -> primary
## In state 32, spurious reduction of production e_pi -> e_app
## In state 28, spurious reduction of production expr -> e_pi
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID DEF_EQUALS LET ID DEF_EQUALS ID IN WITH
##
## Ends in an error in state: 38.
##
## expr -> LET symbol DEF_EQUALS expr IN . expr [ WITH RIGHT_PARENS RIGHT_BRACES LET IN EOF ]
##
## The known suffix of the stack is as follows:
## LET symbol DEF_EQUALS expr IN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID DEF_EQUALS MATCH ID RIGHT_PARENS
##
## Ends in an error in state: 40.
##
## expr -> MATCH expr . WITH option(BAR) loption(separated_nonempty_list(BAR,case)) [ WITH RIGHT_PARENS RIGHT_BRACES LET IN EOF ]
##
## The known suffix of the stack is as follows:
## MATCH expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 23, spurious reduction of production e_app -> primary
## In state 32, spurious reduction of production e_pi -> e_app
## In state 28, spurious reduction of production expr -> e_pi
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID DEF_EQUALS MATCH ID WITH TYPE
##
## Ends in an error in state: 41.
##
## expr -> MATCH expr WITH . option(BAR) loption(separated_nonempty_list(BAR,case)) [ WITH RIGHT_PARENS RIGHT_BRACES LET IN EOF ]
##
## The known suffix of the stack is as follows:
## MATCH expr WITH
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID DEF_EQUALS MATCH ID WITH BAR TYPE
##
## Ends in an error in state: 43.
##
## expr -> MATCH expr WITH option(BAR) . loption(separated_nonempty_list(BAR,case)) [ WITH RIGHT_PARENS RIGHT_BRACES LET IN EOF ]
##
## The known suffix of the stack is as follows:
## MATCH expr WITH option(BAR)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID DEF_EQUALS MATCH ID WITH BAR BAR WITH
##
## Ends in an error in state: 44.
##
## case -> BAR . pattern DOUBLE_ARROW primary [ WITH RIGHT_PARENS RIGHT_BRACES LET IN EOF BAR ]
##
## The known suffix of the stack is as follows:
## BAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID DEF_EQUALS MATCH ID WITH BAR BAR LEFT_PARENS WITH
##
## Ends in an error in state: 45.
##
## pattern -> LEFT_PARENS . def_name list(pattern) RIGHT_PARENS [ RIGHT_PARENS LEFT_PARENS ID DOUBLE_ARROW ]
##
## The known suffix of the stack is as follows:
## LEFT_PARENS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID DEF_EQUALS MATCH ID WITH BAR BAR LEFT_PARENS ID WITH
##
## Ends in an error in state: 46.
##
## pattern -> LEFT_PARENS def_name . list(pattern) RIGHT_PARENS [ RIGHT_PARENS LEFT_PARENS ID DOUBLE_ARROW ]
##
## The known suffix of the stack is as follows:
## LEFT_PARENS def_name
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID DEF_EQUALS MATCH ID WITH BAR BAR LEFT_PARENS ID ID WITH
##
## Ends in an error in state: 48.
##
## list(pattern) -> pattern . list(pattern) [ RIGHT_PARENS ]
##
## The known suffix of the stack is as follows:
## pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID DEF_EQUALS MATCH ID WITH BAR BAR ID WITH
##
## Ends in an error in state: 52.
##
## case -> BAR pattern . DOUBLE_ARROW primary [ WITH RIGHT_PARENS RIGHT_BRACES LET IN EOF BAR ]
##
## The known suffix of the stack is as follows:
## BAR pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID DEF_EQUALS MATCH ID WITH BAR BAR ID DOUBLE_ARROW WITH
##
## Ends in an error in state: 53.
##
## case -> BAR pattern DOUBLE_ARROW . primary [ WITH RIGHT_PARENS RIGHT_BRACES LET IN EOF BAR ]
##
## The known suffix of the stack is as follows:
## BAR pattern DOUBLE_ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID DEF_EQUALS MATCH ID WITH BAR BAR ID DOUBLE_ARROW ID TYPE
##
## Ends in an error in state: 57.
##
## separated_nonempty_list(BAR,case) -> case . [ WITH RIGHT_PARENS RIGHT_BRACES LET IN EOF ]
## separated_nonempty_list(BAR,case) -> case . BAR separated_nonempty_list(BAR,case) [ WITH RIGHT_PARENS RIGHT_BRACES LET IN EOF ]
##
## The known suffix of the stack is as follows:
## case
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID DEF_EQUALS MATCH ID WITH BAR BAR ID DOUBLE_ARROW ID BAR WITH
##
## Ends in an error in state: 58.
##
## separated_nonempty_list(BAR,case) -> case BAR . separated_nonempty_list(BAR,case) [ WITH RIGHT_PARENS RIGHT_BRACES LET IN EOF ]
##
## The known suffix of the stack is as follows:
## case BAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID COLON LEFT_PARENS ID WITH
##
## Ends in an error in state: 60.
##
## primary -> LEFT_PARENS expr . RIGHT_PARENS [ WITH RIGHT_PARENS RIGHT_BRACES NUMBER LET LEFT_PARENS LEFT_BRACES INFIX_ID IN ID EOF DEF_EQUALS BAR ARROW ]
##
## The known suffix of the stack is as follows:
## LEFT_PARENS expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 23, spurious reduction of production e_app -> primary
## In state 32, spurious reduction of production e_pi -> e_app
## In state 28, spurious reduction of production expr -> e_pi
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID COLON ID WITH
##
## Ends in an error in state: 63.
##
## e_pi -> e_pi . ARROW primary [ RIGHT_PARENS RIGHT_BRACES DEF_EQUALS ARROW ]
## tt -> e_pi . [ RIGHT_PARENS RIGHT_BRACES DEF_EQUALS ]
##
## The known suffix of the stack is as follows:
## e_pi
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 23, spurious reduction of production e_app -> primary
## In state 32, spurious reduction of production e_pi -> e_app
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID LEFT_PARENS ID COLON ID RIGHT_BRACES
##
## Ends in an error in state: 66.
##
## parameter -> LEFT_PARENS nonempty_list(symbol) option(type_repr) . RIGHT_PARENS [ LEFT_PARENS LEFT_BRACES DEF_EQUALS COLON ]
##
## The known suffix of the stack is as follows:
## LEFT_PARENS nonempty_list(symbol) option(type_repr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 23, spurious reduction of production e_app -> primary
## In state 32, spurious reduction of production e_pi -> e_app
## In state 63, spurious reduction of production tt -> e_pi
## In state 62, spurious reduction of production type_repr -> COLON tt
## In state 65, spurious reduction of production option(type_repr) -> type_repr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID LEFT_BRACES WITH
##
## Ends in an error in state: 68.
##
## parameter -> LEFT_BRACES . nonempty_list(symbol) option(type_repr) RIGHT_BRACES [ LEFT_PARENS LEFT_BRACES DEF_EQUALS COLON ]
##
## The known suffix of the stack is as follows:
## LEFT_BRACES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID LEFT_BRACES ID RIGHT_PARENS
##
## Ends in an error in state: 69.
##
## parameter -> LEFT_BRACES nonempty_list(symbol) . option(type_repr) RIGHT_BRACES [ LEFT_PARENS LEFT_BRACES DEF_EQUALS COLON ]
##
## The known suffix of the stack is as follows:
## LEFT_BRACES nonempty_list(symbol)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 9, spurious reduction of production nonempty_list(symbol) -> symbol
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID LEFT_BRACES ID COLON ID RIGHT_PARENS
##
## Ends in an error in state: 70.
##
## parameter -> LEFT_BRACES nonempty_list(symbol) option(type_repr) . RIGHT_BRACES [ LEFT_PARENS LEFT_BRACES DEF_EQUALS COLON ]
##
## The known suffix of the stack is as follows:
## LEFT_BRACES nonempty_list(symbol) option(type_repr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 23, spurious reduction of production e_app -> primary
## In state 32, spurious reduction of production e_pi -> e_app
## In state 63, spurious reduction of production tt -> e_pi
## In state 62, spurious reduction of production type_repr -> COLON tt
## In state 65, spurious reduction of production option(type_repr) -> type_repr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID LEFT_BRACES ID RIGHT_BRACES WITH
##
## Ends in an error in state: 72.
##
## list(parameter) -> parameter . list(parameter) [ DEF_EQUALS COLON ]
##
## The known suffix of the stack is as follows:
## parameter
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID COLON ID RIGHT_PARENS
##
## Ends in an error in state: 75.
##
## decl -> LET def_name list(parameter) option(type_repr) . DEF_EQUALS expr [ LET EOF ]
##
## The known suffix of the stack is as follows:
## LET def_name list(parameter) option(type_repr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 23, spurious reduction of production e_app -> primary
## In state 32, spurious reduction of production e_pi -> e_app
## In state 63, spurious reduction of production tt -> e_pi
## In state 62, spurious reduction of production type_repr -> COLON tt
## In state 65, spurious reduction of production option(type_repr) -> type_repr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID DEF_EQUALS WITH
##
## Ends in an error in state: 76.
##
## decl -> LET def_name list(parameter) option(type_repr) DEF_EQUALS . expr [ LET EOF ]
##
## The known suffix of the stack is as follows:
## LET def_name list(parameter) option(type_repr) DEF_EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID DEF_EQUALS ID WITH
##
## Ends in an error in state: 81.
##
## list(decl) -> decl . list(decl) [ EOF ]
##
## The known suffix of the stack is as follows:
## decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 23, spurious reduction of production e_app -> primary
## In state 32, spurious reduction of production e_pi -> e_app
## In state 28, spurious reduction of production expr -> e_pi
## In state 77, spurious reduction of production decl -> LET def_name list(parameter) option(type_repr) DEF_EQUALS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>


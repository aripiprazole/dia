file: WITH
##
## Ends in an error in state: 0.
##
## file' -> . file [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: TYPE WITH
##
## Ends in an error in state: 1.
##
## decl -> TYPE . def_name list(parameter) option(type_repr) EQUALS list(constructor) [ TYPE PRAGMA LET EOF ]
##
## The known suffix of the stack is as follows:
## TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET LEFT_PARENS WITH
##
## Ends in an error in state: 2.
##
## def_name -> LEFT_PARENS . infix_symbol RIGHT_PARENS [ TYPE RIGHT_PARENS PRAGMA LET LEFT_PARENS LEFT_BRACES ID EQUALS EOF COLON ]
##
## The known suffix of the stack is as follows:
## LEFT_PARENS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET LEFT_PARENS COLON WITH
##
## Ends in an error in state: 5.
##
## def_name -> LEFT_PARENS infix_symbol . RIGHT_PARENS [ TYPE RIGHT_PARENS PRAGMA LET LEFT_PARENS LEFT_BRACES ID EQUALS EOF COLON ]
##
## The known suffix of the stack is as follows:
## LEFT_PARENS infix_symbol
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: TYPE ID WITH
##
## Ends in an error in state: 9.
##
## decl -> TYPE def_name . list(parameter) option(type_repr) EQUALS list(constructor) [ TYPE PRAGMA LET EOF ]
##
## The known suffix of the stack is as follows:
## TYPE def_name
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID LEFT_PARENS WITH
##
## Ends in an error in state: 10.
##
## parameter -> LEFT_PARENS . nonempty_list(symbol) option(type_repr) RIGHT_PARENS [ LEFT_PARENS LEFT_BRACES EQUALS COLON ]
##
## The known suffix of the stack is as follows:
## LEFT_PARENS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID LEFT_BRACES ID WITH
##
## Ends in an error in state: 11.
##
## nonempty_list(symbol) -> symbol . [ RIGHT_PARENS RIGHT_BRACES COLON ARROW ]
## nonempty_list(symbol) -> symbol . nonempty_list(symbol) [ RIGHT_PARENS RIGHT_BRACES COLON ARROW ]
##
## The known suffix of the stack is as follows:
## symbol
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID LEFT_PARENS ID RIGHT_BRACES
##
## Ends in an error in state: 13.
##
## parameter -> LEFT_PARENS nonempty_list(symbol) . option(type_repr) RIGHT_PARENS [ LEFT_PARENS LEFT_BRACES EQUALS COLON ]
##
## The known suffix of the stack is as follows:
## LEFT_PARENS nonempty_list(symbol)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 11, spurious reduction of production nonempty_list(symbol) -> symbol
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID COLON WITH
##
## Ends in an error in state: 14.
##
## type_repr -> COLON . tt [ TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET EQUALS EOF BAR ]
##
## The known suffix of the stack is as follows:
## COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID COLON LEFT_PARENS WITH
##
## Ends in an error in state: 16.
##
## plain_primary -> LEFT_PARENS . expr RIGHT_PARENS [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA NUMBER LET LEFT_PARENS LEFT_BRACES INFIX_ID IN ID EQUALS EOF COLON BAR ARROW ]
##
## The known suffix of the stack is as follows:
## LEFT_PARENS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUALS MATCH WITH
##
## Ends in an error in state: 17.
##
## plain_expr -> MATCH . expr WITH nonempty_list(case) [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EOF ]
## plain_expr -> MATCH . expr WITH [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EOF ]
##
## The known suffix of the stack is as follows:
## MATCH
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUALS LET WITH
##
## Ends in an error in state: 18.
##
## plain_expr -> LET . symbol EQUALS expr IN expr [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EOF ]
##
## The known suffix of the stack is as follows:
## LET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUALS LET ID WITH
##
## Ends in an error in state: 19.
##
## plain_expr -> LET symbol . EQUALS expr IN expr [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EOF ]
##
## The known suffix of the stack is as follows:
## LET symbol
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUALS LET ID EQUALS WITH
##
## Ends in an error in state: 20.
##
## plain_expr -> LET symbol EQUALS . expr IN expr [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EOF ]
##
## The known suffix of the stack is as follows:
## LET symbol EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID COLON LEFT_BRACES WITH
##
## Ends in an error in state: 21.
##
## plain_primary -> LEFT_BRACES . expr RIGHT_BRACES [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA NUMBER LET LEFT_PARENS LEFT_BRACES INFIX_ID IN ID EQUALS EOF COLON BAR ARROW ]
##
## The known suffix of the stack is as follows:
## LEFT_BRACES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUALS FUN WITH
##
## Ends in an error in state: 22.
##
## plain_expr -> FUN . nonempty_list(symbol) ARROW expr [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EOF ]
##
## The known suffix of the stack is as follows:
## FUN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUALS FUN ID RIGHT_PARENS
##
## Ends in an error in state: 23.
##
## plain_expr -> FUN nonempty_list(symbol) . ARROW expr [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EOF ]
##
## The known suffix of the stack is as follows:
## FUN nonempty_list(symbol)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 11, spurious reduction of production nonempty_list(symbol) -> symbol
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUALS FUN ID ARROW WITH
##
## Ends in an error in state: 24.
##
## plain_expr -> FUN nonempty_list(symbol) ARROW . expr [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EOF ]
##
## The known suffix of the stack is as follows:
## FUN nonempty_list(symbol) ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUALS ID EQUALS
##
## Ends in an error in state: 36.
##
## e_infix_plain -> e_pi . infix_symbol e_pi [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EOF ]
## plain_expr -> e_pi . [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EOF ]
##
## The known suffix of the stack is as follows:
## e_pi
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 40, spurious reduction of production e_pi_plain -> e_app
## In state 35, spurious reduction of production mark_position(e_pi_plain) -> e_pi_plain
## In state 31, spurious reduction of production e_pi -> mark_position(e_pi_plain)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID COLON ID COLON WITH
##
## Ends in an error in state: 37.
##
## e_infix_plain -> e_pi infix_symbol . e_pi [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EQUALS EOF BAR ]
##
## The known suffix of the stack is as follows:
## e_pi infix_symbol
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID COLON ID MATCH
##
## Ends in an error in state: 40.
##
## e_app_plain -> e_app . primary [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA NUMBER LET LEFT_PARENS LEFT_BRACES INFIX_ID IN ID EQUALS EOF COLON BAR ARROW ]
## e_pi_plain -> e_app . [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET INFIX_ID IN EQUALS EOF COLON BAR ]
## e_pi_plain -> e_app . ARROW e_pi [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET INFIX_ID IN EQUALS EOF COLON BAR ]
##
## The known suffix of the stack is as follows:
## e_app
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID COLON ID ARROW WITH
##
## Ends in an error in state: 41.
##
## e_pi_plain -> e_app ARROW . e_pi [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET INFIX_ID IN EQUALS EOF COLON BAR ]
##
## The known suffix of the stack is as follows:
## e_app ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID COLON LEFT_BRACES ID WITH
##
## Ends in an error in state: 46.
##
## plain_primary -> LEFT_BRACES expr . RIGHT_BRACES [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA NUMBER LET LEFT_PARENS LEFT_BRACES INFIX_ID IN ID EQUALS EOF COLON BAR ARROW ]
##
## The known suffix of the stack is as follows:
## LEFT_BRACES expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 40, spurious reduction of production e_pi_plain -> e_app
## In state 35, spurious reduction of production mark_position(e_pi_plain) -> e_pi_plain
## In state 31, spurious reduction of production e_pi -> mark_position(e_pi_plain)
## In state 36, spurious reduction of production plain_expr -> e_pi
## In state 28, spurious reduction of production mark_position(plain_expr) -> plain_expr
## In state 30, spurious reduction of production expr -> mark_position(plain_expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUALS LET ID EQUALS ID WITH
##
## Ends in an error in state: 48.
##
## plain_expr -> LET symbol EQUALS expr . IN expr [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EOF ]
##
## The known suffix of the stack is as follows:
## LET symbol EQUALS expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 40, spurious reduction of production e_pi_plain -> e_app
## In state 35, spurious reduction of production mark_position(e_pi_plain) -> e_pi_plain
## In state 31, spurious reduction of production e_pi -> mark_position(e_pi_plain)
## In state 36, spurious reduction of production plain_expr -> e_pi
## In state 28, spurious reduction of production mark_position(plain_expr) -> plain_expr
## In state 30, spurious reduction of production expr -> mark_position(plain_expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUALS LET ID EQUALS ID IN WITH
##
## Ends in an error in state: 49.
##
## plain_expr -> LET symbol EQUALS expr IN . expr [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EOF ]
##
## The known suffix of the stack is as follows:
## LET symbol EQUALS expr IN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUALS MATCH ID TYPE
##
## Ends in an error in state: 51.
##
## plain_expr -> MATCH expr . WITH nonempty_list(case) [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EOF ]
## plain_expr -> MATCH expr . WITH [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EOF ]
##
## The known suffix of the stack is as follows:
## MATCH expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 40, spurious reduction of production e_pi_plain -> e_app
## In state 35, spurious reduction of production mark_position(e_pi_plain) -> e_pi_plain
## In state 31, spurious reduction of production e_pi -> mark_position(e_pi_plain)
## In state 36, spurious reduction of production plain_expr -> e_pi
## In state 28, spurious reduction of production mark_position(plain_expr) -> plain_expr
## In state 30, spurious reduction of production expr -> mark_position(plain_expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUALS MATCH ID WITH NUMBER
##
## Ends in an error in state: 52.
##
## plain_expr -> MATCH expr WITH . nonempty_list(case) [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EOF ]
## plain_expr -> MATCH expr WITH . [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EOF ]
##
## The known suffix of the stack is as follows:
## MATCH expr WITH
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUALS MATCH ID WITH BAR WITH
##
## Ends in an error in state: 53.
##
## case -> BAR . pattern DOUBLE_ARROW tt [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EOF BAR ]
##
## The known suffix of the stack is as follows:
## BAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUALS MATCH ID WITH BAR LEFT_PARENS WITH
##
## Ends in an error in state: 54.
##
## pattern -> LEFT_PARENS . def_name list(pattern) RIGHT_PARENS [ RIGHT_PARENS LEFT_PARENS ID DOUBLE_ARROW ]
##
## The known suffix of the stack is as follows:
## LEFT_PARENS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUALS MATCH ID WITH BAR LEFT_PARENS ID WITH
##
## Ends in an error in state: 55.
##
## pattern -> LEFT_PARENS def_name . list(pattern) RIGHT_PARENS [ RIGHT_PARENS LEFT_PARENS ID DOUBLE_ARROW ]
##
## The known suffix of the stack is as follows:
## LEFT_PARENS def_name
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUALS MATCH ID WITH BAR LEFT_PARENS ID ID WITH
##
## Ends in an error in state: 57.
##
## list(pattern) -> pattern . list(pattern) [ RIGHT_PARENS ]
##
## The known suffix of the stack is as follows:
## pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUALS MATCH ID WITH BAR ID WITH
##
## Ends in an error in state: 61.
##
## case -> BAR pattern . DOUBLE_ARROW tt [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EOF BAR ]
##
## The known suffix of the stack is as follows:
## BAR pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUALS MATCH ID WITH BAR ID DOUBLE_ARROW WITH
##
## Ends in an error in state: 62.
##
## case -> BAR pattern DOUBLE_ARROW . tt [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EOF BAR ]
##
## The known suffix of the stack is as follows:
## BAR pattern DOUBLE_ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUALS MATCH ID WITH BAR ID DOUBLE_ARROW ID EQUALS
##
## Ends in an error in state: 69.
##
## nonempty_list(case) -> case . [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EOF ]
## nonempty_list(case) -> case . nonempty_list(case) [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA LET IN EOF ]
##
## The known suffix of the stack is as follows:
## case
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 40, spurious reduction of production e_pi_plain -> e_app
## In state 35, spurious reduction of production mark_position(e_pi_plain) -> e_pi_plain
## In state 31, spurious reduction of production e_pi -> mark_position(e_pi_plain)
## In state 66, spurious reduction of production plain_tt -> e_pi
## In state 64, spurious reduction of production mark_position(plain_tt) -> plain_tt
## In state 65, spurious reduction of production tt -> mark_position(plain_tt)
## In state 63, spurious reduction of production case -> BAR pattern DOUBLE_ARROW tt
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID COLON LEFT_PARENS ID WITH
##
## Ends in an error in state: 71.
##
## plain_primary -> LEFT_PARENS expr . RIGHT_PARENS [ WITH TYPE RIGHT_PARENS RIGHT_BRACES PRAGMA NUMBER LET LEFT_PARENS LEFT_BRACES INFIX_ID IN ID EQUALS EOF COLON BAR ARROW ]
##
## The known suffix of the stack is as follows:
## LEFT_PARENS expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 40, spurious reduction of production e_pi_plain -> e_app
## In state 35, spurious reduction of production mark_position(e_pi_plain) -> e_pi_plain
## In state 31, spurious reduction of production e_pi -> mark_position(e_pi_plain)
## In state 36, spurious reduction of production plain_expr -> e_pi
## In state 28, spurious reduction of production mark_position(plain_expr) -> plain_expr
## In state 30, spurious reduction of production expr -> mark_position(plain_expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID LEFT_PARENS ID COLON ID WITH
##
## Ends in an error in state: 75.
##
## parameter -> LEFT_PARENS nonempty_list(symbol) option(type_repr) . RIGHT_PARENS [ LEFT_PARENS LEFT_BRACES EQUALS COLON ]
##
## The known suffix of the stack is as follows:
## LEFT_PARENS nonempty_list(symbol) option(type_repr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 40, spurious reduction of production e_pi_plain -> e_app
## In state 35, spurious reduction of production mark_position(e_pi_plain) -> e_pi_plain
## In state 31, spurious reduction of production e_pi -> mark_position(e_pi_plain)
## In state 66, spurious reduction of production plain_tt -> e_pi
## In state 64, spurious reduction of production mark_position(plain_tt) -> plain_tt
## In state 65, spurious reduction of production tt -> mark_position(plain_tt)
## In state 73, spurious reduction of production type_repr -> COLON tt
## In state 74, spurious reduction of production option(type_repr) -> type_repr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID LEFT_BRACES WITH
##
## Ends in an error in state: 77.
##
## parameter -> LEFT_BRACES . nonempty_list(symbol) option(type_repr) RIGHT_BRACES [ LEFT_PARENS LEFT_BRACES EQUALS COLON ]
##
## The known suffix of the stack is as follows:
## LEFT_BRACES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID LEFT_BRACES ID RIGHT_PARENS
##
## Ends in an error in state: 78.
##
## parameter -> LEFT_BRACES nonempty_list(symbol) . option(type_repr) RIGHT_BRACES [ LEFT_PARENS LEFT_BRACES EQUALS COLON ]
##
## The known suffix of the stack is as follows:
## LEFT_BRACES nonempty_list(symbol)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 11, spurious reduction of production nonempty_list(symbol) -> symbol
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID LEFT_BRACES ID COLON ID WITH
##
## Ends in an error in state: 79.
##
## parameter -> LEFT_BRACES nonempty_list(symbol) option(type_repr) . RIGHT_BRACES [ LEFT_PARENS LEFT_BRACES EQUALS COLON ]
##
## The known suffix of the stack is as follows:
## LEFT_BRACES nonempty_list(symbol) option(type_repr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 40, spurious reduction of production e_pi_plain -> e_app
## In state 35, spurious reduction of production mark_position(e_pi_plain) -> e_pi_plain
## In state 31, spurious reduction of production e_pi -> mark_position(e_pi_plain)
## In state 66, spurious reduction of production plain_tt -> e_pi
## In state 64, spurious reduction of production mark_position(plain_tt) -> plain_tt
## In state 65, spurious reduction of production tt -> mark_position(plain_tt)
## In state 73, spurious reduction of production type_repr -> COLON tt
## In state 74, spurious reduction of production option(type_repr) -> type_repr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID LEFT_BRACES ID RIGHT_BRACES WITH
##
## Ends in an error in state: 81.
##
## list(parameter) -> parameter . list(parameter) [ EQUALS COLON ]
##
## The known suffix of the stack is as follows:
## parameter
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: TYPE ID COLON ID WITH
##
## Ends in an error in state: 84.
##
## decl -> TYPE def_name list(parameter) option(type_repr) . EQUALS list(constructor) [ TYPE PRAGMA LET EOF ]
##
## The known suffix of the stack is as follows:
## TYPE def_name list(parameter) option(type_repr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 40, spurious reduction of production e_pi_plain -> e_app
## In state 35, spurious reduction of production mark_position(e_pi_plain) -> e_pi_plain
## In state 31, spurious reduction of production e_pi -> mark_position(e_pi_plain)
## In state 66, spurious reduction of production plain_tt -> e_pi
## In state 64, spurious reduction of production mark_position(plain_tt) -> plain_tt
## In state 65, spurious reduction of production tt -> mark_position(plain_tt)
## In state 73, spurious reduction of production type_repr -> COLON tt
## In state 74, spurious reduction of production option(type_repr) -> type_repr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: TYPE ID EQUALS WITH
##
## Ends in an error in state: 85.
##
## decl -> TYPE def_name list(parameter) option(type_repr) EQUALS . list(constructor) [ TYPE PRAGMA LET EOF ]
##
## The known suffix of the stack is as follows:
## TYPE def_name list(parameter) option(type_repr) EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: TYPE ID EQUALS BAR WITH
##
## Ends in an error in state: 86.
##
## constructor -> BAR . def_name type_repr [ TYPE PRAGMA LET EOF BAR ]
##
## The known suffix of the stack is as follows:
## BAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: TYPE ID EQUALS BAR ID WITH
##
## Ends in an error in state: 87.
##
## constructor -> BAR def_name . type_repr [ TYPE PRAGMA LET EOF BAR ]
##
## The known suffix of the stack is as follows:
## BAR def_name
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: TYPE ID EQUALS BAR ID COLON ID WITH
##
## Ends in an error in state: 90.
##
## list(constructor) -> constructor . list(constructor) [ TYPE PRAGMA LET EOF ]
##
## The known suffix of the stack is as follows:
## constructor
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 40, spurious reduction of production e_pi_plain -> e_app
## In state 35, spurious reduction of production mark_position(e_pi_plain) -> e_pi_plain
## In state 31, spurious reduction of production e_pi -> mark_position(e_pi_plain)
## In state 66, spurious reduction of production plain_tt -> e_pi
## In state 64, spurious reduction of production mark_position(plain_tt) -> plain_tt
## In state 65, spurious reduction of production tt -> mark_position(plain_tt)
## In state 73, spurious reduction of production type_repr -> COLON tt
## In state 88, spurious reduction of production constructor -> BAR def_name type_repr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: PRAGMA WITH
##
## Ends in an error in state: 92.
##
## decl -> PRAGMA . def_name list(def_name) [ TYPE PRAGMA LET EOF ]
##
## The known suffix of the stack is as follows:
## PRAGMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: PRAGMA ID WITH
##
## Ends in an error in state: 93.
##
## decl -> PRAGMA def_name . list(def_name) [ TYPE PRAGMA LET EOF ]
##
## The known suffix of the stack is as follows:
## PRAGMA def_name
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: PRAGMA ID ID WITH
##
## Ends in an error in state: 95.
##
## list(def_name) -> def_name . list(def_name) [ TYPE PRAGMA LET EOF ]
##
## The known suffix of the stack is as follows:
## def_name
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET WITH
##
## Ends in an error in state: 97.
##
## decl -> LET . def_name list(parameter) option(type_repr) EQUALS expr [ TYPE PRAGMA LET EOF ]
##
## The known suffix of the stack is as follows:
## LET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID WITH
##
## Ends in an error in state: 98.
##
## decl -> LET def_name . list(parameter) option(type_repr) EQUALS expr [ TYPE PRAGMA LET EOF ]
##
## The known suffix of the stack is as follows:
## LET def_name
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID COLON ID WITH
##
## Ends in an error in state: 100.
##
## decl -> LET def_name list(parameter) option(type_repr) . EQUALS expr [ TYPE PRAGMA LET EOF ]
##
## The known suffix of the stack is as follows:
## LET def_name list(parameter) option(type_repr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 40, spurious reduction of production e_pi_plain -> e_app
## In state 35, spurious reduction of production mark_position(e_pi_plain) -> e_pi_plain
## In state 31, spurious reduction of production e_pi -> mark_position(e_pi_plain)
## In state 66, spurious reduction of production plain_tt -> e_pi
## In state 64, spurious reduction of production mark_position(plain_tt) -> plain_tt
## In state 65, spurious reduction of production tt -> mark_position(plain_tt)
## In state 73, spurious reduction of production type_repr -> COLON tt
## In state 74, spurious reduction of production option(type_repr) -> type_repr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUALS WITH
##
## Ends in an error in state: 101.
##
## decl -> LET def_name list(parameter) option(type_repr) EQUALS . expr [ TYPE PRAGMA LET EOF ]
##
## The known suffix of the stack is as follows:
## LET def_name list(parameter) option(type_repr) EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUALS ID WITH
##
## Ends in an error in state: 106.
##
## list(decl) -> decl . list(decl) [ EOF ]
##
## The known suffix of the stack is as follows:
## decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 40, spurious reduction of production e_pi_plain -> e_app
## In state 35, spurious reduction of production mark_position(e_pi_plain) -> e_pi_plain
## In state 31, spurious reduction of production e_pi -> mark_position(e_pi_plain)
## In state 36, spurious reduction of production plain_expr -> e_pi
## In state 28, spurious reduction of production mark_position(plain_expr) -> plain_expr
## In state 30, spurious reduction of production expr -> mark_position(plain_expr)
## In state 102, spurious reduction of production decl -> LET def_name list(parameter) option(type_repr) EQUALS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>


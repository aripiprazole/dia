let (->) (A : Set) (B : Set) : Set =
  (_ : A) -> B

let Nat =
| zero : Nat
| succ : Nat -> Nat

#pragma NATURAL Nat

let (=) {A : Set} (a b : A) : Set =
| refl : a = a

let Vect (a : Set) (n : Nat) : Set =
| cons : (head : a) -> (tail : Vect a n) -> Vect a (n + 1)
| nil : Vect a 0

let (++) {a : Set} {n m : Nat} (v : Vect a n) (w : Vect a m) : Vect a (n + m) =
  match v with
  | (cons head tail) => cons head (tail ++ w)
  | nil => w

(* Finite numbers *)
let Fin (n : Nat) : Set =
| fzero : Fin (n + 1)
| fsucc : Fin n -> Fin (n + 1)

let (<) {n m : Nat} =
| z<s : n < m
| s<s :
  n < m
  ---------
  n < m + 1

let False : Set

let absurd {a : Set} (f : False) : a =
  match f with | ()
